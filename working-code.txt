6/15/23

import logging
import re
import os
import io
from flask import Flask, request, render_template, flash, redirect
from werkzeug.utils import secure_filename
from docx import Document
import mammoth

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = './uploads'
app.config['ALLOWED_EXTENSIONS'] = {'docx'}

if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def extract_and_replace_tables(filepath):
    doc = Document(filepath)
    table_placeholders = []
    markdown_tables = []

    for i, table in enumerate(doc.tables):
        # replace the table with a placeholder in the document
        placeholder = f"TABLE_PLACEHOLDER_{i}"
        table_placeholders.append(placeholder)

        # convert the table to markdown and save it
        markdown_table = []
        for row in table.rows:
            cells = [cell.text for cell in row.cells]
            markdown_table.append('| ' + ' | '.join(cells) + ' |')
        
        # Add the header separator row
        header_separator = '| --- ' * len(table.columns) + '|'
        markdown_table.insert(1, header_separator)
        
        markdown_tables.append('\n'.join(markdown_table))

        # replace the table with the placeholder in the document
        parent = table._element.getparent()
        parent_index = parent.index(table._element)
        parent.remove(table._element)

        new_paragraph = doc.add_paragraph()
        new_paragraph.add_run().text = placeholder
        parent.insert(parent_index, new_paragraph._element)

    # save the document with placeholders instead of tables
    doc.save(filepath)

    return table_placeholders, markdown_tables

def replace_images_with_placeholder(content, images):
    img_regex = r'!\[.*?\]\((.*?)\)'
    placeholder = '[ADD IMAGE HERE]'
    result = re.sub(img_regex, lambda match: placeholder if match.group(1) in images else match.group(0), content)

    # Remove characters and whitespace between "(data:image" and ")"
    result = re.sub(r'\(data:image.*?\)', '', result)

    return result

def replace_urls(content):
    # Change URLs starting with "https://learn.microsoft.com/azure/" to "/azure/..."
    result = re.sub(r'https://learn.microsoft.com/azure/(.+)', r'/azure/\1', content)
    return result

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename).replace("\\", "/")
            file.save(filepath)

            # Extract and replace tables with placeholders
            table_placeholders, markdown_tables = extract_and_replace_tables(filepath)

            # Convert DOCX to Markdown
            with open(filepath, "rb") as docx_file:
                result = mammoth.convert_to_markdown(docx_file).value

            # Replace placeholders with markdown tables
            for i, placeholder in enumerate(table_placeholders):
                result = result.replace(placeholder, markdown_tables[i])

            # Remove trailing whitespaces from each line
            result = '\n'.join(line.rstrip() for line in result.split('\n'))

            # Remove escape character from markdown
            result = result.replace("\\.", ".").replace("\\)", ")").replace("\\-", "-").replace("\\(", "(").replace("\\]", "]").replace("\\[", "[").replace("\\#", "#")

            # Remove "https://learn.microsoft.com/en-us" from links and keep the remaining URL intact
            result = re.sub(r'https://learn.microsoft.com/[a-z]+-[a-z]+(/azure)?', '/azure', result)
            
            # Replace URLs in the Markdown content
            result = replace_urls(result)
            
            # Remove double spaces and replace them with a single space
            result = result.replace('  ', ' ')

            # Replace double underscore with double asterisks
            result = re.sub(r'__(.*?)__', r'**\1**', result)
            
            # Replace double underscore with double asterisks for bold phrases
            result = re.sub(r' \*\*(.*?)', r'** \1', result)
        
            # Remove periods with space on both sides
            # result = result.replace('. ', '')

            # Get the list of image URLs in the markdown
            images = re.findall(r'!\[.*?\]\((.*?)\)', result)

            # Replace images with placeholder (excluding autogenerated images)
            result = replace_images_with_placeholder(result, images)

            os.remove(filepath)
            return render_template('index.html', markdown_content=result)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)

